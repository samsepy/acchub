datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  services      UserService[]
  watching      Watch[]       @relation("WatchUser")
  watched       Watch[]       @relation("WatchTarget")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Profile {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  screenName  String
  displayName String
  bio         String?
  siteUrl     String?
  birthDate   DateTime?
  sex         Sex?
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id        String   @id @default(cuid())
  name      String   @unique
  url       String   @unique
  users     UserService[]
  icon      String   @default("GoLinkExternal")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserService {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
  screenName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, serviceId])
}

model Watch {
  id       String @id @default(cuid())
  user     User   @relation("WatchUser", fields: [userId], references: [id])
  userId   String
  target   User   @relation("WatchTarget", fields: [targetId], references: [id])
  targetId String

  @@unique([userId, targetId])
  @@map("watches")
}

enum Sex {
  MAN
  WOMAN
  LGBT
}
